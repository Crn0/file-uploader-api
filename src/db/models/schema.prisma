// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int              @id @default(autoincrement())
  username  String           @unique @db.VarChar(255)
  email     String?          @unique @db.VarChar(255)
  password  String?          @db.VarChar(60)
  role      Role             @default(user)
  folders   Folder[]
  files     File[]
  openIds   OpenId[]
  tokens    BlackListToken[]
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime         @default(now()) @map("updated_at") @db.Timestamptz(3)

  @@map("users")
}

model OpenId {
  id        Int      @id @default(autoincrement())
  provider  Provider
  tokenId   String   @map("token_id") @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([provider, tokenId])
  @@map("open_ids")
}

model BlackListToken {
  id        Int      @id @default(autoincrement())
  jwtId     String   @unique() @map("jwt_id") @db.VarChar(36)
  userId    Int      @map("user_id")
  expiresIn DateTime @map("expires_in")
  user      User     @relation(fields: [userId], references: [id])

  @@map("blacklist_tokens")
}

model Folder {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  path         String     @db.VarChar(255)
  ownerId      Int        @map("owner_id")
  parentId     Int?       @map("parent_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @map("updated_at")
  type         EntityType @default(folder)
  owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  parentFolder Folder?    @relation("FolderSubfolders", fields: [parentId], references: [id])
  folders      Folder[]   @relation("FolderSubfolders")
  files        File[]

  @@map("folders")
}

model File {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(255)
  publicId     String       @map("public_id") @db.VarChar(255)
  size         BigInt       @db.BigInt
  version      String
  ownerId      Int          @map("owner_id")
  folderId     Int          @map("folder_id")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @map("updated_at")
  type         EntityType   @default(file)
  deliveryType DeliveryType @default(upload) @map("delivery_type")
  owner        User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  folder       Folder       @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("files")
}

enum Provider {
  google
}

enum Role {
  demo
  user
  admin
}

enum DeliveryType {
  upload
  private
  authenticated
}

enum EntityType {
  folder
  file
}